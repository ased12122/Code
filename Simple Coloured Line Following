// Include files for required libraries
#include <stdio.h>
#include <iostream>
#include "opencv_aee.hpp"
#include "main.hpp"    // You can use this file for declaring defined values and functions
#include "pi2c.h"




using namespace std;

void setup(void)
{
    setupCamera(320, 240);  // Enable the camera for OpenCV
}

int main( int argc, char** argv )
{

    setup();    // Call a setup function to prepare IO and devices

    cv::namedWindow("Photo");   // Create a GUI window called photo

    while(true)    // Main loop to perform image processing
    {
        Mat frame;

        // Can't capture frames without a camera attached. Use static images instead
        while(frame.empty())
        {
        frame = captureFrame();
        }
            // Capture a frame from the camera and store in a new matrix variable
        cv::flip(frame,frame,0);
        cv::flip(frame,frame,1);
        cv::imshow("Photo", frame); //Display the image in the window

        Mat colour; //matrix for storing colour mask
        cvtColor (frame, colour, COLOR_BGR2HSV);
        int choice; //users choice

               cout << "Select 1 for Black. 2 for Red. 3 for Yellow. 4 for Green. 5 for Blue" << endl;
               cin >> choice;

               if (choice==1) //Black
        {
            Scalar min_Range = Scalar (0,0,0);
            Scalar max_Range = Scalar (179,255,51);
        }

               else if (choice==2) //Red
        {
            Scalar min_Range = Scalar (160,35,40);
            Scalar max_Range = Scalar (185,245,245);
        }

        else if (choice==3) //Yellow
        {
            Scalar min_Range = Scalar (20,100,50);
            Scalar max_Range = Scalar (40,255,255);
        }

        else if (choice==4) //Green
        {
            Scalar min_Range = Scalar (75,55,40);
            Scalar max_Range = Scalar (95,255,255);
        }

        else if (choice==5) //Blue
        {
            Scalar min_Range = Scalar (97,40,23);
            Scalar max_Range = Scalar (120,255,250);
        }
        else //Default set to black
        {
            Scalar min_Range = Scalar (0,0,0);
            Scalar max_Range = Scalar (179,255,51);
        }


        inRange(colour, min_Range, max_Range, colour); //isolating particular colour mask


// colour mask image is then split into strips to be analysed individually. The range was restricted due to lag issues in processing the full image

        //Mat L5 = colour (Range(0,240), Range(0, 32));
        Mat L4 = colour (Range(0,150), Range(32, 64));
        Mat L3 = colour (Range(0,150), Range(64, 96));
        Mat L2 = colour (Range(0,150), Range(96, 128));
        Mat L1 = colour (Range(0,150), Range(128, 160));
        Mat R5 = colour (Range(0,150), Range(160, 192));
        Mat R4 = colour (Range(0,150), Range(192, 224));
        Mat R3 = colour (Range(0,150), Range(224, 256));
        Mat R2 = colour (Range(0,150), Range(256, 288));
        //Mat R1 = colour (Range(0,240), Range(288, 320));



//Arbitrary Weightings used for PID. Assumes the width of on strip as '1'. Therefore distances from centre of central strip to the centre of whichever strip is taken
        //int l5 = -4.5;
        int l4 = -3.5;
        int l3 = -2.5;
        int l2 = -1.5;
        int l1 = -0.5;

        int r1 = 0.5;
        int r2 = 1.5;
        int r3 = 2.5;
        int r4 = 3.5;
        //int r5 = 4.5;




//Taking a count of non-white pixels of each strip
        //int l5n = countNonZero(L5);
        //imshow ("L5", L5);
       int l4n = countNonZero(L4);
        imshow ("L4", L4);
        int l3n = countNonZero(L3);
        imshow ("L3", L3);
        int l2n = countNonZero(L2);
        imshow ("L2", L2);
        int l1n = countNonZero(L1);
        imshow ("L1", L1);
        int r5n = countNonZero(R5);
        imshow ("R5", R5);
        int r4n = countNonZero(R4);
        imshow ("R4", R4);
        int r3n = countNonZero(R3);
        imshow ("R3", R3);
        int r2n = countNonZero(R2);
        imshow ("R2", R2);
        //int r1n = countNonZero(R1);
        //imshow ("R1", R1);


        int leftMotor_speed, rightMotor_speed, servoAngle;
        float Kp = 4; //guess by trial and error
        float Ki = 0; //guess by trial and error
        float Kd = 6; //guess by trial and error
        float error, error_old, sum, u, den,num;

        error_old = error;
     //PID calc
        num = (l4n*l4+l3n*l3+l2n*l2+l1n*l1+r5n*r5+r4n*r4+r3n*r3+r2n*r2);
        den = (l4n+l3n+l2n+l1n+r5n+r4n+r3n+r2n+1);
        error = num / den;
        if (den != 0) //preventing issue of code making an error when denominator becomes 0
        {
         error = num / den;
        }
        else{

        error = num;
        }

        sum = sum + error;

        u=(Kp*error)+(Ki*sum)+(Kd*(error-error_old));


        //arduino.i2cWriteArduinoInt(u);
        Pi2c arduino(7); //Create a new object "arduino" using address "0x07"
        char receive[16]; //Create a buffer of char (single bytes) for the data

        //Receive from the Arduino and put the contents into the "receive" char array
        arduino.i2cRead(receive,16);
        //Print out what the Arduino is sending...
        std::cout << "Arduino Says: " << receive << std::endl;

        //Send an 16 bit integer
        arduino.i2cWriteArduinoInt(u); //u value transmitted to arduino where the servo angle and motor speed adjustments are made


        int key = cv::waitKey(1);   // Wait 1ms for a keypress (required to update windows)

        key = (key==255) ? -1 : key;    // Check if the ESC key has been pressed
        if (key == 27)
            break;
           }

           closeCV();  // Disable the camera and close any windows
           return 0;
}




